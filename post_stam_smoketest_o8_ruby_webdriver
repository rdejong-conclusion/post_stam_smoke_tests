require "json"
require "selenium-webdriver"
gem "test-unit"
require "test/unit"

class PostStamSmoketestO8RubyWebdriver < Test::Unit::TestCase

  def setup
    Selenium::WebDriver::Firefox.path = "/root/firefox/firefox"
    @wait = Selenium::WebDriver::Wait.new(:timeout => 600)
    @driver = Selenium::WebDriver.for(:firefox, :profile => "firefox-default")
    @base_url = "https://o8wlsnode1.infoplus-ot.ris:14051/HARM/controller"
    @accept_next_alert = true
    @driver.manage.timeouts.implicit_wait = 600
    @verification_errors = []
  end
  
  def teardown
    @driver.quit
    assert_equal [], @verification_errors
  end
  
  def test_post_stam_smoketest_o8_ruby_webdriver
    @driver.get(@base_url)
    @driver.find_element(:name, "username").clear
    @driver.find_element(:name, "username").send_keys "harmadmin"
    @driver.find_element(:name, "userpassword").clear
    @driver.find_element(:name, "userpassword").send_keys "harmadmin"
    @driver.find_element(:css, "input[type=\"submit\"]").click
    @driver.get(@base_url + "?action=procs_status&tonen=all")
    File.open("stam_types.lst").each do|stam_type|
	test = printf("#{stam_type}")
	body = @driver.find_element(:tag_name => "body").text
	# puts body.include? "#{test}"
	puts "Checking start processing #{test}"
	assert !300.times{ break if (body.include? "Start verwerken stamgegeven type #{test}"); sleep 2}
	puts "Checking #{test} finished"
	assert !300.times{ break if (body.include? "#{test} afgerond");sleep 2}
    end
    @driver.find_element(:link, "Log uit").click
  end
  
  def element_present?(how, what)
    @driver.find_element(how, what)
    true
  rescue Selenium::WebDriver::Error::NoSuchElementError
    false
  end
  
  def alert_present?()
    @driver.switch_to.alert
    true
  rescue Selenium::WebDriver::Error::NoAlertPresentError
    false
  end
  
  def verify(&blk)
    yield
  rescue Test::Unit::AssertionFailedError => ex
    @verification_errors << ex
  end
  
  def close_alert_and_get_its_text(how, what)
    alert = @driver.switch_to().alert()
    alert_text = alert.text
    if (@accept_next_alert) then
      alert.accept()
    else
      alert.dismiss()
    end
    alert_text
  ensure
    @accept_next_alert = true
  end
end
