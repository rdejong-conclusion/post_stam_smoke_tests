require "json"
require "selenium-webdriver"
require "rspec"
require "rspec_junit_formatter"
include RSpec::Expectations

describe "PostStamSmoketestRubyWebdriver" do

  before(:each) do
    Selenium::WebDriver::Firefox.path = "/root/firefox/firefox"
    $target_host = ENV["target_host"]
    $target_user = ENV["target_user"]
    $target_pass = ENV["target_pass"]
    @driver = Selenium::WebDriver.for :firefox, :profile => "firefox-default")
    @base_url = "https://#{$target_host}:14051/HARM/controller"
    @accept_next_alert = true
    @driver.manage.timeouts.implicit_wait = 600
    @verification_errors = []
    RSpec.configure do |config|
      config.expect_with :rspec do |c|
        c.syntax = [:should, :expect]
      end
    end
  end
  
  after(:each) do
    @driver.quit
    @verification_errors.should == []
  end
  
  it "test_post_stam_smoketest_ruby_webdriver" do
    puts "Checking target_host #{$target_host}"
    @driver.get(@base_url)
    @driver.find_element(:name, "username").clear
    @driver.find_element(:name, "username").send_keys $target_user
    @driver.find_element(:name, "userpassword").clear
    @driver.find_element(:name, "userpassword").send_keys $target_pass
    @driver.find_element(:css, "input[type=\"submit\"]").click
    File.open("stam_types.lst").each do|stam_type|
      # Cleanup stam_type, newline is present
      type = stam_type.delete!("\n")
      puts "Checking whether processing #{type} has started"
      @driver.get(@base_url + "?action=procs_status&tonen=all")
      expect(@driver.find_element(:tag_name => "body").text).to include("Start verwerken stamgegeven type #{type}")
      puts "Checking whether processing type #{type} finished"
      @driver.get(@base_url + "?action=procs_status&tonen=all")
      expect(@driver.find_element(:tag_name => "body").text).to include("Verwerken stamgegeven #{type} afgerond")
    end
    @driver.find_element(:link, "Log uit").click
  end
  
  def element_present?(how, what)
    @driver.find_element(how, what)
    true
  rescue Selenium::WebDriver::Error::NoSuchElementError
    false
  end
  
  def alert_present?()
    @driver.switch_to.alert
    true
  rescue Selenium::WebDriver::Error::NoAlertPresentError
    false
  end
  
  def verify(&blk)
    yield
  rescue ExpectationNotMetError => ex
    @verification_errors << ex
  end
  
  def close_alert_and_get_its_text(how, what)
    alert = @driver.switch_to().alert()
    alert_text = alert.text
    if (@accept_next_alert) then
      alert.accept()
    else
      alert.dismiss()
    end
    alert_text
  ensure
    @accept_next_alert = true
  end
end
